{"version":3,"sources":["getWeb3.js","components/HelloUser.js","components/ContractStatus.js","components/Interactions/ProposalsRegistrationStartedInteraction.js","components/Interactions/RegisteringVotersInteraction.js","components/Interactions/ProposalsRegistrationEndedInteraction.js","components/Interactions/VotesTalliedInteraction.js","components/Interactions/VotingSessionEndedInteraction.js","components/Interactions/VotingSessionStartedInteraction.js","components/ContractInteraction.js","components/Voters.js","components/Proposals.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","on","location","reload","enable","console","log","provider","providers","HttpProvider","HelloUser","this","props","addr","React","Component","ContractStatus","contractAddress","contractOwner","ProposalRegistrationStartedInteraction","handleOnChange","e","setState","target","name","value","handleSubmit","preventDefault","component","contract","methods","addProposal","state","inputValue","send","from","account","once","hash","error","interactionResult","message","then","receipt","addedProposalId","events","ProposalRegistered","returnValues","proposalId","setTimeout","handleSubmitWorkflowChange","endProposalsRegistering","endRegisteringResult","contractStatus","description","onSubmit","className","htmlFor","id","type","onChange","RegisteringVotersInteraction","handleOnChangeVoterInput","handleSubmitVoter","addVoter","utils","toChecksumAddress","addVoterResult","addedVoterAddress","VoterRegistered","voterAddress","startProposalsRegistering","startRegisteringResult","pattern","ProposalsRegistrationEndedInteraction","startVotingSession","startVotingResult","VotesTalliedInteraction","loadWinningProposalId","winningProposalID","call","result","winningProposalId","catch","err","VotingSessionEndedInteraction","tallyVotes","tallyVotesResult","VotingSessionStartedInteraction","loadProposals","getPastEvents","fromBlock","toBlock","results","proposals","forEach","push","length","selectedProposal","onProposalSelect","setVote","voter","Voted","votedProposal","endVotingSession","endVotingResult","map","key","workflowStatusString","infoString","ContractInteraction","style","border","Number","workflowStatus","Voters","loadVotes","loadVoters","voters","getVoter","voterInfo","address","info","marginLeft","marginRight","voterDetails","hasVoted","votedProposalId","Proposals","getOneProposal","proposalInfo","proposalDetails","voteCount","App","useState","isOwner","isVoter","accounts","owner","contractState","setContractState","useEffect","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","alert","options","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.623ed263.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load', async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          window.ethereum.on('accountsChanged', function () {\n            // it would be better to reload the state\n            window.location.reload();\n          });\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log('Injected web3 detected.');\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545');\n        const web3 = new Web3(provider);\n        console.log('No web3 instance injected, using Local web3.');\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\n\nexport default class HelloUser extends React.Component {\n  render() {\n    return (\n      <h2>Hello {this.props.addr} !</h2>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class ContractStatus extends React.Component {\n  render() {\n    return (\n      <div>\n        <h3>Contract address: {this.props.contractAddress}</h3>\n        <h3>Contract owner: {this.props.contractOwner}</h3>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\"\n\nexport default class ProposalRegistrationStartedInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputValue: null, interactionResult: \"-\" };\n  }\n\n  handleOnChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.addProposal(this.state.inputValue).send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ interactionResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        let addedProposalId = receipt.events.ProposalRegistered.returnValues.proposalId;\n        component.setState({ interactionResult: \"Proposal #\" + addedProposalId + \" has been added!\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  handleSubmitWorkflowChange = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.endProposalsRegistering().send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ endRegisteringResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        component.setState({ endRegisteringResult: \"Voting contract is now in proposal registering ended state\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>{this.props.contractStatus}</h4>\n        <p>{this.props.description}</p>\n        <form onSubmit={this.handleSubmit} className=\"form\">\n          <label htmlFor=\"proposalDesc\">Proposal description: </label>\n          <input id=\"proposalDesc\" type=\"text\" name='inputValue' onChange={this.handleOnChange} className=\"input\" />\n          <input type=\"submit\" value=\"Add proposal\" className=\"button\" />\n        </form>\n        <p>Interaction result: {this.state.interactionResult}</p>\n        <form onSubmit={this.handleSubmitWorkflowChange} className=\"form\">\n          <input type=\"submit\" value=\"End proposal registering\" className=\"button\" />\n        </form>\n        <p>End proposal registering interaction result: {this.state.endRegisteringResult}</p>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\"\nimport Web3 from 'web3';\n\nexport default class RegisteringVotersInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { inputValue: null, addVoterResult: \"-\", startRegisteringResult: \"-\" };\n  }\n\n  handleOnChangeVoterInput = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmitVoter = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.addVoter(Web3.utils.toChecksumAddress(this.state.inputValue)).send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ addVoterResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        let addedVoterAddress = receipt.events.VoterRegistered.returnValues.voterAddress;\n        component.setState({ addVoterResult: addedVoterAddress + \" has been added as a voter!\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n\n  }\n\n  handleSubmitWorkflowChange = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.startProposalsRegistering().send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ startRegisteringResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        component.setState({ startRegisteringResult: \"Voting contract is now in proposal registering started state\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h4>{this.props.contractStatus}</h4>\n        <p>{this.props.description}</p>\n        <form onSubmit={this.handleSubmitVoter} className=\"form\">\n          <label htmlFor=\"voterAddress\">Voter address: </label>\n          <input id=\"voterAddress\" type=\"text\" name='inputValue' onChange={this.handleOnChangeVoterInput} pattern=\"^0x[a-fA-F0-9]{40}$\" className=\"input\" />\n          <input type=\"submit\" value=\"Add voter\" className=\"button\" />\n        </form>\n        <p>Add voter interaction result: {this.state.addVoterResult}</p>\n        <form onSubmit={this.handleSubmitWorkflowChange} className=\"form\">\n          <input type=\"submit\" value=\"Start proposal registering\" className=\"button\" />\n        </form>\n        <p>Start proposal registering interaction result: {this.state.startRegisteringResult}</p>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\"\n\nexport default class ProposalsRegistrationEndedInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleSubmitWorkflowChange = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.startVotingSession().send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ startVotingResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        component.setState({ startVotingResult: \"Voting contract is now in voting session started state\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>{this.props.contractStatus}</h4>\n        <p>{this.props.description}</p>\n\n        <form onSubmit={this.handleSubmitWorkflowChange} className=\"form\">\n          <input type=\"submit\" value=\"Start voting session\" className=\"button\" />\n        </form>\n        <p>Start voting session interaction result: {this.state.startVotingResult}</p>\n      </div>\n    )\n  }\n\n}","import React, { Component } from \"react\"\n\nexport default class VotesTalliedInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { winningProposalId: null };\n\n    this.loadWinningProposalId();\n  }\n\n  loadWinningProposalId = async () => {\n    this.props.contract.methods.winningProposalID().call({ from: this.props.account })\n      .then((result) => {\n        this.setState({winningProposalId: result});\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>{this.props.contractStatus}</h4>\n        <p>{this.props.description}</p>\n        <p>The winning proposal is {this.state.winningProposalId == null ? '...' : '#' + this.state.winningProposalId + ' !'}</p>\n      </div>\n    );\n  }\n\n}","import React, { Component } from \"react\"\n\nexport default class VotingSessionEndedInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  handleSubmitWorkflowChange = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.tallyVotes().send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ tallyVotesResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        component.setState({ tallyVotesResult: \"Votes are tallied !\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>{this.props.contractStatus}</h4>\n        <p>{this.props.description}</p>\n\n        <form onSubmit={this.handleSubmitWorkflowChange} className=\"form\">\n          <input type=\"submit\" value=\"Tally votes !\" className=\"button\" />\n        </form>\n        <p>Tally votes interaction result: {this.state.tallyVotesResult}</p>\n      </div>\n    )\n  }\n\n}","import React, { Component } from \"react\"\n\nexport default class VotingSessionStartedInteraction extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { selectedProposal: null, proposals: [] };\n    this.loadProposals();\n  }\n\n  loadProposals = async () => {\n    this.props.contract.getPastEvents('ProposalRegistered', { fromBlock: 0, toBlock: 'latest' })\n      .then((results) => {\n        let proposals = [];\n        results.forEach(async (result) => {\n          proposals.push(result.returnValues.proposalId);\n          this.setState({ proposals: proposals });\n        })\n        // this.setState({ proposals: proposals });\n        if (this.state.proposals.length > 0) {\n          this.setState({ ...this.state.proposals, selectedProposal: this.state.proposals[0] })\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  onProposalSelect = e => {\n    this.setState({ selectedProposal: e.target.value })\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.setVote(this.state.selectedProposal).send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ interactionResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        let voter = receipt.events.Voted.returnValues.voter;\n        let votedProposal = receipt.events.Voted.returnValues.proposalId;\n        component.setState({ interactionResult: \"User \" + voter + \" voted for proposal #\" + votedProposal });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  handleSubmitWorkflowChange = async (e) => {\n    e.preventDefault();\n\n    // Needed to keep the correct 'this' in promises\n    const component = this;\n\n    await this.props.contract.methods.endVotingSession().send({ from: this.props.account })\n      .once('transactionHash', function (hash) {\n        console.log('Transaction sent with hash: ' + hash);\n      })\n      .on('error', function (error) {\n        component.setState({ endVotingResult: error.message });\n      })\n      .then(function (receipt) {\n        // will be fired once the receipt is mined\n        component.setState({ endVotingResult: \"Voting contract is now in voting session ended state\" });\n        setTimeout(() => window.location.reload(), 2000);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>{this.props.contractStatus}</h4>\n        <p>{this.props.description}</p>\n        <form onSubmit={this.handleSubmit} className=\"form\">\n          <label htmlFor=\"proposals\">Vote for proposal: </label>\n          <select name=\"proposals\" id=\"proposals\" onChange={this.onProposalSelect}>\n            {this.state.proposals.map((proposalId) =>\n              <option key={proposalId} value={proposalId}>#{proposalId}</option>\n            )}\n          </select>\n          <input type=\"submit\" value=\"Vote\" className=\"button\" />\n        </form>\n        <form onSubmit={this.handleSubmitWorkflowChange} className=\"form\">\n          <input type=\"submit\" value=\"End voting session\" className=\"button\" />\n        </form>\n        <p>End voting session interaction result: {this.state.endVotingResult}</p>\n      </div>\n    )\n  }\n\n}","import React from 'react';\nimport ProposalRegistrationStartedInteraction from './Interactions/ProposalsRegistrationStartedInteraction';\nimport RegisteringVotersInteraction from './Interactions/RegisteringVotersInteraction';\nimport ProposalsRegistrationEndedInteraction from './Interactions/ProposalsRegistrationEndedInteraction';\nimport VotesTalliedInteraction from './Interactions/VotesTalliedInteraction';\nimport VotingSessionEndedInteraction from './Interactions/VotingSessionEndedInteraction';\nimport VotingSessionStartedInteraction from './Interactions/VotingSessionStartedInteraction';\n\nconst workflowStatusString = [\n  'RegisteringVoters',\n  'ProposalsRegistrationStarted',\n  'ProposalsRegistrationEnded',\n  'VotingSessionStarted',\n  'VotingSessionEnded',\n  'VotesTallied',\n];\n\nconst infoString = [\n  'Contract\\'s owner can register voters.',\n  'Registered voters can add proposals.',\n  'Proposal adding session is now ended, contract\\'s owner can move to the next state.',\n  'Registered voters can now vote for their favorites proposals.',\n  'The voting session has ended, contract\\'s owner can move to the next state.',\n  'Votes have been tallied !',\n];\n\nexport default class ContractInteraction extends React.Component {\n\n  render() {\n    const InteractionComponent = () => {\n      switch (Number(this.props.workflowStatus)) {\n        case 0:\n          return <RegisteringVotersInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n            description={infoString[this.props.workflowStatus]} />;\n        case 1:\n          return <ProposalRegistrationStartedInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n            description={infoString[this.props.workflowStatus]} />;\n        case 2:\n          return <ProposalsRegistrationEndedInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n            description={infoString[this.props.workflowStatus]} />;\n        case 3:\n          return <VotingSessionStartedInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n            description={infoString[this.props.workflowStatus]} />;\n        case 4:\n          return <VotingSessionEndedInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n            description={infoString[this.props.workflowStatus]} />;\n        case 5:\n          return <VotesTalliedInteraction\n            account={this.props.account}\n            contract={this.props.contract}\n            contractStatus={workflowStatusString[this.props.workflowStatus]}\n            description={infoString[this.props.workflowStatus]} />;\n        default:\n          console.log('Workflow status: ' + this.props.workflowStatus);\n          return <p>Unknown workflow status!</p>;\n      }\n    };\n\n    return (\n      <div style={{ border: '1px solid black' }}>\n        <InteractionComponent />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\"\n\nexport default class Voters extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { voters: [] };\n    this.loadVoters();\n    this.loadVotes();\n  }\n\n  loadVotes = async () => {\n\n    this.props.contract.getPastEvents('Voted', { fromBlock: 0, toBlock: 'latest' })\n      .then((results) => {\n        //let voters = [];\n        results.forEach(async (result) => {\n          console.log(result);\n          // let voterInfo = await this.props.contract.methods.getVoter(result.address).call({ from: this.props.account });\n          // voters.push({ address: result.returnValues.voterAddress, info: voterInfo });\n          // console.log(voterInfo);\n          // this.setState({ voters: voters });\n        });\n\n        // this.setState({ voters: voters });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  loadVoters = async () => {\n    this.props.contract.getPastEvents('VoterRegistered', { fromBlock: 0, toBlock: 'latest' })\n      .then((results) => {\n        let voters = [];\n        results.forEach(async (result) => {\n          let voterInfo = await this.props.contract.methods.getVoter(result.returnValues.voterAddress).call({ from: this.props.account });\n          voters.push({ address: result.returnValues.voterAddress, info: voterInfo });\n          this.setState({ voters: voters });\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>Registered voters</h4>\n        <table style={{ border: '1px solid black', marginLeft: 'auto', marginRight: 'auto' }}>\n          <thead>\n            <tr>\n              <th>Address</th>\n              <th>Has voted</th>\n              <th>Voted for proposal</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.voters.map(voterDetails =>\n              <tr key={voterDetails.address}>\n                <td>{voterDetails.address}</td>\n                <td>{voterDetails.info.hasVoted ? 'Yes' : 'No'}</td>\n                <td>{voterDetails.info.hasVoted ? '#' + voterDetails.info.votedProposalId : '-'}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div >\n    )\n  }\n}","import React, { Component } from \"react\"\n\nexport default class Proposals extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { proposals: [] };\n    this.loadProposals();\n  }\n\n  loadProposals = async () => {\n    this.props.contract.getPastEvents('ProposalRegistered', { fromBlock: 0, toBlock: 'latest' })\n      .then((results) => {\n        let proposals = [];\n        results.forEach(async (result) => {\n          let proposalInfo = await this.props.contract.methods.getOneProposal(result.returnValues.proposalId).call({ from: this.props.account });\n          proposals.push({ proposalId: result.returnValues.proposalId, info: proposalInfo });\n          console.log(proposalInfo);\n          this.setState({ proposals: proposals });\n        })\n        // this.setState({ proposals: proposals });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>Proposals</h4>\n        <table style={{ border: '1px solid black', marginLeft: 'auto', marginRight: 'auto' }}>\n          <thead>\n            <tr>\n              <th>Number</th>\n              <th>Description</th>\n              <th>Vote count</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.proposals.map(proposalDetails =>\n              <tr key={proposalDetails.proposalId}>\n                <td>#{proposalDetails.proposalId}</td>\n                <td>{proposalDetails.info.description}</td>\n                <td>{proposalDetails.info.voteCount}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}","import React, { useEffect, useState } from 'react';\nimport VotingContract from './contracts/Voting.json';\nimport getWeb3 from './getWeb3';\n\nimport './App.css';\nimport HelloUser from './components/HelloUser';\nimport ContractStatus from './components/ContractStatus';\nimport ContractInteraction from './components/ContractInteraction';\nimport Voters from './components/Voters';\nimport Proposals from './components/Proposals';\n\nfunction App() {\n  const [state, setState] = useState({ isOwner: false, isVoter: false, web3: null, accounts: null, contract: null });\n  const [contractState, setContractState] = useState({\n    owner: '',\n    workflowStatus: 0\n    // events: { voterRegistered: [], workflowStatusChange: [], proposalRegistered: [], voted: [] },\n  });\n\n  useEffect(() => {\n    (async function () {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VotingContract.networks[networkId];\n        const instance = new web3.eth.Contract(VotingContract.abi, deployedNetwork && deployedNetwork.address);\n\n        console.log(instance.methods);\n\n        let workflowStatus = await instance.methods.workflowStatus().call();\n        let owner = await instance.methods.owner().call();\n        setContractState({ owner: owner, workflowStatus: workflowStatus });\n\n        //let value = await instance.methods.get().call();\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        setState({ web3: web3, accounts: accounts, contract: instance });\n      } catch (error) {\n        alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n      }\n    })();\n  }, []);\n\n  if (!state.web3) {\n    return <div>Loading Web3, accounts, and contract...</div>;\n  } else {\n    return (\n      <div className=\"App\">\n        <h1>Alyra Voting DApp project</h1>\n        <p>This simple React frontend is used to interact with the Voting smartcontract</p>\n        <HelloUser addr={state.accounts[0]} />\n        <ContractStatus\n          contractOwner={contractState.owner}\n          contractAddress={state.contract.options.address}\n        />\n        <ContractInteraction\n          //contractState={contractState}\n          workflowStatus={contractState.workflowStatus}\n          account={state.accounts[0]}\n          contract={state.contract}\n        />\n        <Voters contract={state.contract} account={state.accounts[0]} />\n        <Proposals contract={state.contract} account={state.accounts[0]} />\n      </div>\n    );\n  }\n}\nexport default App;\n","/* eslint-disable no-console */\n/* eslint-disable eqeqeq */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}